package fps;

import java.io.*;

public class SNPReport2
{
	public String contigName;
	public int contigLength;
	public int snpPos;
	public char refAlleleAtLast;
	public int accumBaseA;
	public int accumBaseC;
	public int accumBaseT;
	public int accumBaseG;
	public int accumUndetermined;
	public int acummRefAllele;
	public int totalDiffAlleles;
	public int numberOfOverlappingReads;
	public int numTotalAvailReads;
	public int numUsedReads;
	public float roundedPercentOfMappedUsedReads;
	public boolean presenceOf3OrMoreAlleles;
	public boolean presenceOfBothAlleles;
	public boolean presenceOnlyAlternateAlleles;
	public boolean presenceOnlyReferenceAllele;
	public boolean presenceOfOddOccurrence;
	public boolean hasBLASTResultsBeforeFilter;
	public boolean hasBLASTResultsAfterFilter;
	public String paralogReport;
	// ----------------------------------------- New block of code created specifically for the "RegionQuantifier" class ------------------------------------------------------------------------------------------------------------------------------------------
	public boolean blastResultIsEmpty;
	public boolean nonACTGEvent;
	public boolean fpSNPSiteNotVisitedByBlast;
	public boolean isRevComp;
	public int dist2SNPFromEndOfContig;
	public int sStart;
	public int snpPosOnGenome;
	public int sEnd;
	public boolean misAssembly;
	public String chrmInGenome;
	//public String chrmID;
	public int accumFragFromDiffChrm;
	public int accumFragFromSameChrm;
	public int accumFragFromWrongRegionSameChrm;
	public int accumMismappedRead;
	public int accumCorrectlyMappedRead;
	public int accumMismatchedRead;
	public int accumMatchedRead;
	public Character refAlleleOnGenome4Comparison;
	public int accumMisAssemblyMismatchedRead;
	public int accumMisAssemblyMatchedRead;
	public int accumMisAssemblyDiffChrmMismapMatchedRead;
	public int accumMisAssemblyDiffChrmMismapMismatchedRead;
	public int accumMisAssemblySameChrmCorrectlyMappedMatchedRead;
	public int accumMisAssemblySameChrmCorrectlyMappedMismatchedRead;
	public int accumMisAssemblySameChrmMismapMatchedRead;
	public int accumMisAssemblySameChrmMismapMismatchedRead;
	public int accumCorrectAssyMismatchedRead;
	public int accumCorrectAssyMatchedRead;
	public int accumCorrectAssyDiffChrmMismapMatchedRead;
	public int accumCorrectAssyDiffChrmMismapMismatchedRead;
	public int accumCorrectAssySameChrmCorrectlyMappedMatchedRead;
	public int accumCorrectAssySameChrmCorrectlyMappedMismatchedRead;
	public int accumCorrectAssySameChrmMismapMatchedRead;
	public int accumCorrectAssySameChrmMismapMismatchedRead;
	public int accumOddSituation4MisAssemblyScenario;
	public int accumOddSituation4CorrectAssyScenario;
	public int accumNetMismappedReads;
	public float percentageOfNetMismappedReads;
	// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public void outputToFile(BufferedWriter writer) throws IOException
	{
		writer.write(contigName+"\t");
		writer.write(contigLength+"\t");
		writer.write(snpPos+"\t");
		writer.write(refAlleleAtLast+"\t");
		writer.write(accumBaseA+"\t");
		writer.write(accumBaseC+"\t");
		writer.write(accumBaseT+"\t");
		writer.write(accumBaseG+"\t");
		writer.write(accumUndetermined+"\t");
		writer.write(acummRefAllele+"\t");
		writer.write(totalDiffAlleles+"\t");
		writer.write(numberOfOverlappingReads+"\t");
		writer.write(numTotalAvailReads+"\t");
		writer.write(numUsedReads+"\t");
		writer.write(roundedPercentOfMappedUsedReads+"\t");
		writer.write(presenceOf3OrMoreAlleles+"\t");
		writer.write(presenceOfBothAlleles+"\t");
		writer.write(presenceOnlyAlternateAlleles+"\t");
		writer.write(presenceOnlyReferenceAllele+"\t");
		writer.write(presenceOfOddOccurrence+"\t");
		writer.write(hasBLASTResultsBeforeFilter+"\t");
		writer.write(hasBLASTResultsAfterFilter+"\t");
		writer.write(paralogReport+"\t");
		// ----------------------------------------- New block of code created specifically for the "RegionQuantifier" class ------------------------------------------------------------------------------------------------------------------------------------------
		writer.write(blastResultIsEmpty+"\t");
		writer.write(nonACTGEvent+"\t");
		writer.write(fpSNPSiteNotVisitedByBlast+"\t");
		writer.write(isRevComp+"\t");
		writer.write(dist2SNPFromEndOfContig+"\t");
		writer.write(sStart+"\t");
		writer.write(snpPosOnGenome+"\t");
		writer.write(sEnd+"\t");
		writer.write(misAssembly+"\t");
		writer.write(chrmInGenome+"\t");
		writer.write(refAlleleOnGenome4Comparison+"\t");
		//writer.write(chrmID+"\t");
		//writer.write(lowerBound+"\t");
		//writer.write(upperBound+"\t");
		writer.write(accumFragFromDiffChrm+"\t");
		writer.write(accumFragFromSameChrm+"\t");
		writer.write(accumFragFromWrongRegionSameChrm+"\t");
		writer.write(accumMatchedRead+"\t");
		writer.write(accumMismatchedRead+"\t");
		writer.write(accumCorrectAssyMatchedRead+"\t");
		writer.write(accumCorrectAssyMismatchedRead+"\t");
		writer.write(accumMisAssemblyMatchedRead+"\t");
		writer.write(accumMisAssemblyMismatchedRead+"\t");
		writer.write(accumCorrectlyMappedRead+"\t");
		writer.write(accumMismappedRead+"\t");
		writer.write(accumMisAssemblyDiffChrmMismapMatchedRead+"\t");
		writer.write(accumMisAssemblyDiffChrmMismapMismatchedRead+"\t");
		writer.write(accumMisAssemblySameChrmCorrectlyMappedMatchedRead+"\t");
		writer.write(accumMisAssemblySameChrmMismapMatchedRead+"\t");
		writer.write(accumMisAssemblySameChrmCorrectlyMappedMismatchedRead+"\t");
		writer.write(accumMisAssemblySameChrmMismapMismatchedRead+"\t");
		writer.write(accumOddSituation4MisAssemblyScenario+"\t");
		writer.write(accumCorrectAssyDiffChrmMismapMatchedRead+"\t");
		writer.write(accumCorrectAssyDiffChrmMismapMismatchedRead+"\t");
		writer.write(accumCorrectAssySameChrmCorrectlyMappedMatchedRead+"\t");
		writer.write(accumCorrectAssySameChrmMismapMatchedRead+"\t");
		writer.write(accumCorrectAssySameChrmCorrectlyMappedMismatchedRead+"\t");
		writer.write(accumCorrectAssySameChrmMismapMismatchedRead+"\t");
		writer.write(accumOddSituation4CorrectAssyScenario+"\t");
		writer.write(accumNetMismappedReads+"\t");
		writer.write(percentageOfNetMismappedReads+"\t");
	        // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		writer.newLine();
	}
	public static void printHeader(BufferedWriter writer) throws IOException
	{
		writer.write("contig"+"\t");
		writer.write("length"+"\t");
		writer.write("snpPos"+"\t");
		writer.write("refAllele"+"\t");
		writer.write("Qty 'A'"+"\t");
		writer.write("Qty 'C'"+"\t");
		writer.write("Qty 'T'"+"\t");
		writer.write("Qty 'G'"+"\t");
		writer.write("Qty 'Not Det'"+"\t");
		writer.write("Tot RefAllele"+"\t");
		writer.write("Tot DiffAlleles"+"\t");
		writer.write("Qty OverReads"+"\t");
		writer.write("Qty AvailReads"+"\t");
		writer.write("Qty UsedReads"+"\t");
		writer.write("%MappedReads"+"\t");
		writer.write("3OrMoreAlleles?"+"\t");
		writer.write("BothAlleles?"+"\t");
		writer.write("OnlyAltAlleles?"+"\t");
		writer.write("OnlyRefAllele?"+"\t");
		writer.write("AnyOddOccur?"+"\t");
		writer.write("BLAST hits (BEFORE filtering)?"+"\t");
		writer.write("BLAST hits (AFTER filtering)?"+"\t");
		writer.write("BLAST hit:HasRefAllele?:Qty 'A':Qty 'C':Qty 'T':Qty 'G':Qty 'Not Det';"+"\t");
		 // ----------------------------------------- New block of code created specifically for the "RegionQuantifier" class ------------------------------------------------------------------------------------------------------------------------------------------
		writer.write("blastResultIsEmpty?"+"\t");
		writer.write("nonACTGEvent?"+"\t");
		writer.write("fpSNPSiteNotVisitedByBlast?"+"\t");
		writer.write("isRevComp?"+"\t");
		writer.write("dist2SNPFromEndOfContig (N/A if isRevComp false):"+"\t");
		writer.write("sStart"+"\t");
		writer.write("snpPosOnGenome"+"\t");
		writer.write("sEnd"+"\t");
		writer.write("misAssembly?"+"\t");
		writer.write("chrmInGenome"+"\t");
		writer.write("refAlleleOnGenome4Comparison"+"\t");
		//writer.write("chrmID"+"\t");
		//writer.write("lowerBound"+"\t");
		//writer.write("upperBound"+"\t");
		writer.write("accumFragFromDiffChrm"+"\t");
		writer.write("accumFragFromSameChrm"+"\t");
		writer.write("accumFragFromWrongRegionSameChrm"+"\t");
		writer.write("accumMatchedRead"+"\t");
		writer.write("accumMismatchedRead"+"\t");
		writer.write("accumCorrectAssyMatchedRead"+"\t");
		writer.write("accumCorrectAssyMismatchedRead"+"\t");
		writer.write("accumMisAssemblyMatchedRead"+"\t");
		writer.write("accumMisAssemblyMismatchedRead"+"\t");
		writer.write("accumCorrectlyMappedRead"+"\t");
		writer.write("accumMismappedRead"+"\t");
		writer.write("accumMisAssemblyDiffChrmMismapMatchedRead"+"\t");
		writer.write("accumMisAssemblyDiffChrmMismapMismatchedRead"+"\t");
		writer.write("accumMisAssemblySameChrmCorrectlyMappedMatchedRead"+"\t");
		writer.write("accumMisAssemblySameChrmMismapMatchedRead"+"\t");
		writer.write("accumMisAssemblySameChrmCorrectlyMappedMismatchedRead"+"\t");
		writer.write("accumMisAssemblySameChrmMismapMismatchedRead"+"\t");
		writer.write("accumOddSituation4MisAssemblyScenario"+"\t");
		writer.write("accumCorrectAssyDiffChrmMismapMatchedRead"+"\t");
		writer.write("accumCorrectAssyDiffChrmMismapMismatchedRead"+"\t");
		writer.write("accumCorrectAssySameChrmCorrectlyMappedMatchedRead"+"\t");
		writer.write("accumCorrectAssySameChrmMismapMatchedRead"+"\t");
		writer.write("accumCorrectAssySameChrmCorrectlyMappedMismatchedRead"+"\t");
		writer.write("accumCorrectAssySameChrmMismapMismatchedRead"+"\t");
		writer.write("accumOddSituation4CorrectAssyScenario"+"\t");
		writer.write("accumNetMismappedReads"+"\t");
		writer.write("percentageOfNetMismappedReads"+"\t");
		// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		writer.newLine();
	}
	public void outputToStdout()
	{	
		/*
		//print header
		System.out.print("transcript"+"\t");
		System.out.print("length"+"\t");
		System.out.print("snpPos"+"\t");
		System.out.print("refAllele"+"\t");
		System.out.print("Qty 'A'"+"\t");
		System.out.print("Qty 'C'"+"\t");
		System.out.print("Qty 'T'"+"\t");
		System.out.print("Qty 'G'"+"\t");
		System.out.print("Qty 'Not Det'"+"\t");
		System.out.print("Tot RefAllele"+"\t");
		System.out.print("Tot DiffAlleles"+"\t");
		System.out.print("Qty OverReads"+"\t");
		System.out.print("Qty AvailReads"+"\t");
		System.out.print("Qty UsedReads"+"\t");
		System.out.print("%MappedReads"+"\t");
		System.out.print("3OrMoreAlleles?"+"\t");
		System.out.print("BothAlleles?"+"\t");
		System.out.print("OnlyAltAlleles?"+"\t");
		System.out.print("OnlyRefAllele?"+"\t");
		System.out.print("AnyOddOccur?"+"\t");
		System.out.println();
		
		//print data
		System.out.print(transcriptName+"\t");
		System.out.print(transcriptLength+"\t");
		System.out.print(snpPos+"\t");
		System.out.print(refAlleleAtLast+"\t");
		System.out.print(accumBaseA+"\t");
		System.out.print(accumBaseC+"\t");
		System.out.print(accumBaseT+"\t");
		System.out.print(accumBaseG+"\t");
		System.out.print(accumUndetermined+"\t");
		System.out.print(acummRefAllele+"\t");
		System.out.print(totalDiffAlleles+"\t");
		System.out.print(numberOfOverlappingReads+"\t");
		System.out.print(numTotalAvailReads+"\t");
		System.out.print(numUsedReads+"\t");
		System.out.print(roundedPercentOfMappedUsedReads+"\t");
		System.out.print(presenceOf3OrMoreAlleles+"\t");
		System.out.print(presenceOfBothAlleles+"\t");
		System.out.print(presenceOnlyAlternateAlleles+"\t");
		System.out.print(presenceOnlyReferenceAllele+"\t");
		System.out.print(presenceOfOddOccurrence+"\t");
		System.out.println();
		*/
		System.out.println("\n------------------------------------ START: Reporting block for contig "+contigName+" at position "+snpPos+" -------------------------------------");
		System.out.println("\nReport stage 1: AnalyzeHomozygousSNPs class...");
		System.out.println("\nContig length: "+contigLength+" bases.");
		System.out.println("SNP position: "+snpPos+".");
		System.out.println("Reference allele at that position: "+refAlleleAtLast+".");
		System.out.println("Number of reads overlapping the SNP position: "+numberOfOverlappingReads+".");
		System.out.println("Quantity of reads containing the 'A'/'a' allele at that position: "+accumBaseA+".");
		System.out.println("Quantity of reads containing the 'C'/'c' allele at that position: "+accumBaseC+".");
		System.out.println("Quantity of reads containing the 'T'/'t' allele at that position: "+accumBaseT+".");
		System.out.println("Quantity of reads containing the 'G'/'g' allele at that position: "+accumBaseG+".");
		System.out.println("Quantity of reads containing an UNDETERMINED allele at that position: "+accumUndetermined+".");
		System.out.println("Summary of reads containing the REFERENCE ALLELE '"+refAlleleAtLast+"' at that position: "+acummRefAllele+".");
		System.out.println("Summary of reads containing an ALTERNATE ALLELE at that position: "+totalDiffAlleles+".");
		 // -----------------------------------------Block of code removed specifically for the "RegionQuantifier" class ------------------------------------------------------------------------------------------------------------------------------------------
		//System.out.println("\nTOTAL NUMBER of AVAILABLE READS on transcript assembly time for the mapping related to the "+contigName+".sorted.bam file: "+numTotalAvailReads+".");
		//System.out.println("ACTUAL NUMBER of MAPPED/USED READS in the mapping related to the "+contigName+".sorted.bam file: "+numUsedReads+".");
		//System.out.println("PERCENTAGE of MAPPED/USED READS from the initial available set: "+roundedPercentOfMappedUsedReads+"%.");
		 // -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		System.out.println("\nBoth the REFERENCE ALLELE and some type of ALTERNATE ALLELE are present: "+presenceOfBothAlleles+".");
		System.out.println("Apart from the REFERENCE ALLELE, there is MORE THAN ONE TYPE of ALTERNATE ALLELE present: "+presenceOf3OrMoreAlleles+".");
		System.out.println("ONLY ALTERNATE ALLELE(s) is/are present and there is NO occurrence of the REFERENCE ALLELE: "+presenceOnlyAlternateAlleles+".");
		System.out.println("ONLY THE REFERENCE ALLELE(s) is present: "+presenceOnlyReferenceAllele+".");
		System.out.println("Houston, we have a problem...: "+presenceOfOddOccurrence+".");
		System.out.println("Any kind of BLAST hits found? "+hasBLASTResultsBeforeFilter+".");
		System.out.println("Perfect matches for BLAST hits found? "+hasBLASTResultsAfterFilter+".");
		System.out.println("List of BLAST hits found in the format 'BLAST hit:HasRefAllele?:Qty 'A':Qty 'C':Qty 'T':Qty 'G':Qty 'Not Det';': "+paralogReport+".");
		System.out.println();
		System.out.println("Report stage 2: RegionQuantifier class...");
		System.out.println();
		 // ----------------------------------------- New block of code created specifically for the "RegionQuantifier" class ------------------------------------------------------------------------------------------------------------------------------------------
		System.out.println("blastResultIsEmpty? "+blastResultIsEmpty);
		System.out.println("nonACTGEvent? "+nonACTGEvent);
		System.out.println("fpSNPSiteNotVisitedByBlast? "+fpSNPSiteNotVisitedByBlast);
		System.out.println("isRevComp? "+isRevComp);
		System.out.println("dist2SNPFromEndOfContig (N/A if isRevComp false): "+dist2SNPFromEndOfContig);
		System.out.println("sStart: "+sStart);
		System.out.println("snpPosOnGenome: "+snpPosOnGenome);
		System.out.println("sEnd: "+sEnd);
		System.out.println("misAssembly? "+misAssembly);
		System.out.println("chrmInGenome: "+chrmInGenome);
		System.out.println("refAlleleOnGenome4Comparison: "+refAlleleOnGenome4Comparison);
		System.out.println("accumFragFromDiffChrm: "+accumFragFromDiffChrm);
		System.out.println("accumFragFromSameChrm: "+accumFragFromSameChrm);
		System.out.println("accumFragFromWrongRegionSameChrm: "+accumFragFromWrongRegionSameChrm);
		System.out.println("accumMatchedRead: "+accumMatchedRead);
		System.out.println("accumMismatchedRead: "+accumMismatchedRead);
		System.out.println("accumCorrectAssyMatchedRead: "+accumCorrectAssyMatchedRead);
		System.out.println("accumCorrectAssyMismatchedRead: "+accumCorrectAssyMismatchedRead);
		System.out.println("accumMisAssemblyMatchedRead: "+accumMisAssemblyMatchedRead);
		System.out.println("accumMisAssemblyMismatchedRead: "+accumMisAssemblyMismatchedRead);
		System.out.println("accumCorrectlyMappedRead: "+accumCorrectlyMappedRead);
		System.out.println("accumMismappedRead: "+accumMismappedRead);
		System.out.println("accumMisAssemblyDiffChrmMismapMatchedRead: "+accumMisAssemblyDiffChrmMismapMatchedRead);
		System.out.println("accumMisAssemblyDiffChrmMismapMismatchedRead: "+accumMisAssemblyDiffChrmMismapMismatchedRead);
		System.out.println("accumMisAssemblySameChrmCorrectlyMappedMatchedRead: "+accumMisAssemblySameChrmCorrectlyMappedMatchedRead);
		System.out.println("accumMisAssemblySameChrmMismapMatchedRead: "+accumMisAssemblySameChrmMismapMatchedRead);
		System.out.println("accumMisAssemblySameChrmCorrectlyMappedMismatchedRead: "+accumMisAssemblySameChrmCorrectlyMappedMismatchedRead);
		System.out.println("accumMisAssemblySameChrmMismapMismatchedRead: "+accumMisAssemblySameChrmMismapMismatchedRead);
		System.out.println("accumOddSituation4MisAssemblyScenario: "+accumOddSituation4MisAssemblyScenario);
		System.out.println("accumCorrectAssyDiffChrmMismapMatchedRead: "+accumCorrectAssyDiffChrmMismapMatchedRead);
		System.out.println("accumCorrectAssyDiffChrmMismapMismatchedRead: "+accumCorrectAssyDiffChrmMismapMismatchedRead);
		System.out.println("accumCorrectAssySameChrmCorrectlyMappedMatchedRead: "+accumCorrectAssySameChrmCorrectlyMappedMatchedRead);
		System.out.println("accumCorrectAssySameChrmMismapMatchedRead: "+accumCorrectAssySameChrmMismapMatchedRead);
		System.out.println("accumCorrectAssySameChrmCorrectlyMappedMismatchedRead: "+accumCorrectAssySameChrmCorrectlyMappedMismatchedRead);
		System.out.println("accumCorrectAssySameChrmMismapMismatchedRead: "+accumCorrectAssySameChrmMismapMismatchedRead);
		System.out.println("accumOddSituation4CorrectAssyScenario: "+accumOddSituation4CorrectAssyScenario);
		System.out.println("accumNetMismappedReads: "+accumNetMismappedReads);
		System.out.println("percentageOfNetMismappedReads: "+percentageOfNetMismappedReads);
		// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		System.out.println("\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- END: Reporting block for contig "+contigName+" at position "+snpPos+" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*");
	}
}
